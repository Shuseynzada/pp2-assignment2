package Source.GUI;

import javax.swing.*;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Custom TableCellEditor for editing buttons inside a JTable cell.
 * This class extends AbstractCellEditor and implements the TableCellEditor interface
 * to customize the behavior of cells containing buttons in a JTable.
 *
 * @author Farhad Aliyev
 * @author Shamkhal Huseynzade
 * @date 02/01/2024
 */
public class ButtonCellEditor extends AbstractCellEditor implements TableCellEditor, ActionListener {
    private JButton button;
    private JTable table;
    private MoviePage moviePage;
    private char action;

    /**
     * Constructs a ButtonCellEditor with the specified MoviePage and action character.
     *
     * @param moviePage The MoviePage associated with the cell editor.
     * @param action    The character representing the action of the button ('+' for add, '-' for remove).
     */
    public ButtonCellEditor(MoviePage moviePage, char action) {
        this.moviePage = moviePage;
        this.action = action;
        button = new JButton(action + "");
        button.addActionListener(this);
    }

    /**
     * Gets the component used for editing a table cell.
     *
     * @param table      The JTable in which the cell exists.
     * @param value      The value to be edited in the cell (ignored here).
     * @param isSelected True if the cell is selected.
     * @param row        The row index of the cell.
     * @param column     The column index of the cell.
     * @return The customized JButton component for editing the cell.
     */
    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        this.table = table;
        return button;
    }

    /**
     * Gets the edited cell value.
     *
     * @return null, as the cell editor does not provide a new value.
     */
    @Override
    public Object getCellEditorValue() {
        return null;
    }

    /**
     * Handles the action performed when the button is clicked.
     *
     * @param e The ActionEvent generated by the button click.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        int selectedRow = table.getEditingRow();
        if (selectedRow != -1) { // Check if a row is actually selected
            TableModel model = table.getModel();
            int value = (Integer) model.getValueAt(selectedRow, 0);
            if (action == '+') {
                moviePage.getUser().getWatchList().addToWatchList(value);
            } else if (action == '-') {
                moviePage.getUser().getWatchList().removeFromList(value);
            }
            UsersDatabase.updateFile();
            moviePage.refreshTables();
        }
    }
}
